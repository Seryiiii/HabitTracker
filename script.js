// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
const themeToggle = document.getElementById('themeToggle');
const body = document.body;

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'dark') {
    body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
themeToggle.addEventListener('click', () => {
    body.classList.toggle('dark-theme');
    
    if (body.classList.contains('dark-theme')) {
        localStorage.setItem('theme', 'dark');
        themeToggle.textContent = '‚òÄÔ∏è';
    } else {
        localStorage.setItem('theme', 'light');
        themeToggle.textContent = 'üåô';
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
let habits = JSON.parse(localStorage.getItem('habits')) || [];
let expenses = JSON.parse(localStorage.getItem('expenses')) || [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–µ–∫
function resetHabitsProgress() {
    const today = new Date().toISOString().split('T')[0];
    const lastResetDate = localStorage.getItem('lastResetDate');
    
    if (lastResetDate !== today) {
        habits = habits.map(habit => ({
            ...habit,
            progress: 0,
            date: today
        }));
        
        localStorage.setItem('habits', JSON.stringify(habits));
        localStorage.setItem('lastResetDate', today);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        renderHabits();
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
resetHabitsProgress();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
setInterval(resetHabitsProgress, 60000);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º
const habitForm = document.getElementById('habit-form');
const expenseForm = document.getElementById('expense-form');
const habitsListDiv = document.getElementById('habits-list');
const expensesListDiv = document.getElementById('expenses-list');

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modalOverlay = document.getElementById('confirmModal');
const modalMessage = document.getElementById('modalMessage');
const confirmButton = document.getElementById('confirmDelete');
const cancelButton = document.getElementById('cancelDelete');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
let currentDeleteFunction = null;
let currentDeleteParams = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function showModal(message, deleteFunction, params) {
    modalMessage.textContent = message;
    currentDeleteFunction = deleteFunction;
    currentDeleteParams = params;
    modalOverlay.style.display = 'flex';
}

function hideModal() {
    modalOverlay.style.display = 'none';
    currentDeleteFunction = null;
    currentDeleteParams = null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
confirmButton.addEventListener('click', () => {
    if (currentDeleteFunction) {
        currentDeleteFunction(...currentDeleteParams);
    }
    hideModal();
});

cancelButton.addEventListener('click', hideModal);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø—Ä–∏–≤—ã—á–µ–∫
habitForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const habitName = document.getElementById('habit-name').value;
    const habitFrequency = parseInt(document.getElementById('habit-frequency').value);
    
    const habit = {
        id: Date.now(),
        name: habitName,
        frequency: habitFrequency,
        progress: 0,
        date: new Date().toISOString().split('T')[0]
    };
    
    habits.push(habit);
    saveHabits();
    renderHabits();
    habitForm.reset();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
expenseForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const expense = {
        id: Date.now(),
        name: document.getElementById('expense-name').value,
        type: document.getElementById('expense-type').value,
        date: document.getElementById('expense-date').value,
        amount: parseFloat(document.getElementById('expense-amount').value)
    };
    
    expenses.push(expense);
    saveExpenses();
    renderExpenses();
    expenseForm.reset();
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
function saveHabits() {
    localStorage.setItem('habits', JSON.stringify(habits));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
function saveExpenses() {
    localStorage.setItem('expenses', JSON.stringify(expenses));
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    const [year, month, day] = dateString.split('-');
    return `${day}.${month}.${year}`;
}

function updateProgressBar(progressElement, newWidth) {
    progressElement.classList.add('updating');
    progressElement.style.width = `${newWidth}%`;
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        progressElement.classList.remove('updating');
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
function renderHabits() {
    habitsListDiv.innerHTML = '';
    
    habits.forEach(habit => {
        const habitElement = document.createElement('div');
        habitElement.className = 'habit-item';
        habitElement.setAttribute('data-habit-id', habit.id);
        
        const progressPercentage = (habit.progress / habit.frequency) * 100;
        
        habitElement.innerHTML = `
            <div>
                <h3>${habit.name}</h3>
                <p>–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å</p>
                <div class="progress-bar">
                    <div class="progress" style="width: 0%"></div>
                </div>
            </div>
            <div class="habit-controls">
                <button onclick="incrementHabit(${habit.id})">+</button>
                <button onclick="decrementHabit(${habit.id})">-</button>
                <button onclick="confirmDeleteHabit(${habit.id}, '${habit.name}')">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        habitsListDiv.appendChild(habitElement);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM
        const progressBar = habitElement.querySelector('.progress');
        requestAnimationFrame(() => {
            updateProgressBar(progressBar, progressPercentage);
        });
    });
}

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const expenseFilter = document.getElementById('expense-filter');
const expenseSort = document.getElementById('expense-sort');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
expenseFilter.addEventListener('change', renderExpenses);
expenseSort.addEventListener('change', renderExpenses);

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function filterExpenses(expenses) {
    const filterValue = expenseFilter.value;
    if (filterValue === '–≤—Å–µ') {
        return expenses;
    }
    return expenses.filter(expense => expense.type === filterValue);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function sortExpenses(expenses) {
    const sortValue = expenseSort.value;
    return [...expenses].sort((a, b) => {
        switch (sortValue) {
            case 'date-desc':
                return new Date(b.date) - new Date(a.date);
            case 'date-asc':
                return new Date(a.date) - new Date(b.date);
            case 'amount-desc':
                return b.amount - a.amount;
            case 'amount-asc':
                return a.amount - b.amount;
            default:
                return 0;
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
function renderExpenses() {
    expensesListDiv.innerHTML = '';
    
    let filteredExpenses = filterExpenses(expenses);
    let sortedExpenses = sortExpenses(filteredExpenses);
    
    sortedExpenses.forEach(expense => {
        const expenseElement = document.createElement('div');
        expenseElement.className = 'expense-item';
        
        expenseElement.innerHTML = `
            <div>
                <h3>${expense.name}</h3>
                <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expense.type}</p>
                <p>–î–∞—Ç–∞: ${formatDate(expense.date)}</p>
                <p>–°—É–º–º–∞: ${expense.amount} ‚ÇΩ</p>
            </div>
            <button onclick="confirmDeleteExpense(${expense.id}, '${expense.name}')">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        
        expensesListDiv.appendChild(expenseElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function incrementHabit(id) {
    const habit = habits.find(h => h.id === id);
    if (habit && habit.progress < habit.frequency) {
        habit.progress++;
        saveHabits();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const habitElement = document.querySelector(`[data-habit-id="${id}"]`);
        if (habitElement) {
            const progressBar = habitElement.querySelector('.progress');
            const progressPercentage = (habit.progress / habit.frequency) * 100;
            updateProgressBar(progressBar, progressPercentage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressText = habitElement.querySelector('p');
            progressText.textContent = `–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å`;
        } else {
            renderHabits();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function decrementHabit(id) {
    const habit = habits.find(h => h.id === id);
    if (habit && habit.progress > 0) {
        habit.progress--;
        saveHabits();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const habitElement = document.querySelector(`[data-habit-id="${id}"]`);
        if (habitElement) {
            const progressBar = habitElement.querySelector('.progress');
            const progressPercentage = (habit.progress / habit.frequency) * 100;
            updateProgressBar(progressBar, progressPercentage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressText = habitElement.querySelector('p');
            progressText.textContent = `–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å`;
        } else {
            renderHabits();
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function confirmDeleteHabit(id, name) {
    showModal(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É "${name}"?`, deleteHabit, [id]);
}

function confirmDeleteExpense(id, name) {
    showModal(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${name}"?`, deleteExpense, [id]);
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
function deleteHabit(id) {
    habits = habits.filter(habit => habit.id !== id);
    saveHabits();
    renderHabits();
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
function deleteExpense(id) {
    expenses = expenses.filter(expense => expense.id !== id);
    saveExpenses();
    renderExpenses();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
renderHabits();
renderExpenses();

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å
const calendarOverlay = document.getElementById('calendarOverlay');
const calendarDays = document.getElementById('calendarDays');
const currentMonthElement = document.getElementById('currentMonth');
const currentYearElement = document.getElementById('currentYear');
const prevMonthBtn = document.getElementById('prevMonth');
const nextMonthBtn = document.getElementById('nextMonth');
const todayBtn = document.getElementById('todayBtn');
const clearBtn = document.getElementById('clearBtn');

const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

let currentDate = new Date();
let selectedDate = new Date();

// –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–µ –¥–∞—Ç—ã
document.getElementById('expense-date').addEventListener('click', (e) => {
    e.preventDefault();
    calendarOverlay.style.display = 'flex';
    renderCalendar();
});

// –ó–∞–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
calendarOverlay.addEventListener('click', (e) => {
    if (e.target === calendarOverlay) {
        calendarOverlay.style.display = 'none';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
prevMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar();
});

nextMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar();
});

todayBtn.addEventListener('click', () => {
    currentDate = new Date();
    selectedDate = new Date();
    renderCalendar();
    updateDateInput();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—á–∏—Å—Ç–∏—Ç—å
clearBtn.addEventListener('click', () => {
    const dateInput = document.getElementById('expense-date');
    dateInput.value = '';
    calendarOverlay.style.display = 'none';
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º
calendarOverlay.addEventListener('wheel', (e) => {
    e.preventDefault();
    const direction = e.deltaY > 0 ? 1 : -1;
    
    const calendarContent = document.querySelector('.calendar-grid');
    calendarContent.style.transform = `translateY(${direction * 20}px)`;
    calendarContent.style.opacity = '0';
    
    setTimeout(() => {
        currentDate.setMonth(currentDate.getMonth() + direction);
        renderCalendar();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        calendarContent.style.transform = `translateY(${-direction * 20}px)`;
        calendarContent.style.opacity = '1';
        
        // –ü–ª–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        requestAnimationFrame(() => {
            calendarContent.style.transform = 'translateY(0)';
        });
    }, 200);
});

function renderCalendar() {
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const monthYear = document.querySelector('.month-year');
    monthYear.style.transform = 'translateY(-10px)';
    monthYear.style.opacity = '0';
    
    setTimeout(() => {
        currentMonthElement.textContent = months[currentDate.getMonth()];
        currentYearElement.textContent = currentDate.getFullYear();
        
        monthYear.style.transform = 'translateY(0)';
        monthYear.style.opacity = '1';
    }, 100);

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ renderCalendar –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    calendarDays.innerHTML = '';
    
    let firstDayIndex = firstDay.getDay() || 7;
    firstDayIndex--;
    
    const prevLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);
    for (let i = firstDayIndex - 1; i >= 0; i--) {
        const dayElement = createDayElement(prevLastDay.getDate() - i, 'other-month');
        calendarDays.appendChild(dayElement);
    }
    
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const isToday = isCurrentDay(day);
        const dayElement = createDayElement(day, isToday ? 'today' : '');
        calendarDays.appendChild(dayElement);
    }
    
    const remainingDays = 42 - calendarDays.children.length;
    for (let day = 1; day <= remainingDays; day++) {
        const dayElement = createDayElement(day, 'other-month');
        calendarDays.appendChild(dayElement);
    }
}

function createDayElement(day, className = '') {
    const dayElement = document.createElement('div');
    dayElement.className = `day ${className}`;
    dayElement.textContent = day;
    
    dayElement.addEventListener('click', () => {
        if (!dayElement.classList.contains('other-month')) {
            selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            updateDateInput();
            calendarOverlay.style.display = 'none';
        }
    });
    
    return dayElement;
}

function isCurrentDay(day) {
    const today = new Date();
    return day === today.getDate() &&
           currentDate.getMonth() === today.getMonth() &&
           currentDate.getFullYear() === today.getFullYear();
}

function updateDateInput() {
    const dateInput = document.getElementById('expense-date');
    const formattedDate = selectedDate.toISOString().split('T')[0];
    dateInput.value = formattedDate;
} 