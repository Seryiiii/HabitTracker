// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
const themeToggle = document.getElementById('themeToggle');
const body = document.body;

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'dark') {
    body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
themeToggle.addEventListener('click', () => {
    body.classList.toggle('dark-theme');
    
    if (body.classList.contains('dark-theme')) {
        localStorage.setItem('theme', 'dark');
        themeToggle.textContent = '‚òÄÔ∏è';
    } else {
        localStorage.setItem('theme', 'light');
        themeToggle.textContent = 'üåô';
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
let habits = JSON.parse(localStorage.getItem('habits')) || [];
let expenses = JSON.parse(localStorage.getItem('expenses')) || [];
let categories = JSON.parse(localStorage.getItem('categories')) || [
    { id: 1, name: '–ï–¥–∞', emoji: 'üçΩÔ∏è', value: '–µ–¥–∞', color: '#FF6384' },
    { id: 2, name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', emoji: 'üöå', value: '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', color: '#36A2EB' },
    { id: 3, name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', emoji: 'üéÆ', value: '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', color: '#FFCE56' },
    { id: 4, name: '–®–∫–æ–ª–∞', emoji: 'üìö', value: '—à–∫–æ–ª–∞', color: '#4BC0C0' },
    { id: 5, name: '–î—Ä—É–≥–æ–µ', emoji: 'üì¶', value: '–¥—Ä—É–≥–æ–µ', color: '#9966FF' }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–µ–∫
function resetHabitsProgress() {
    const today = new Date().toISOString().split('T')[0];
    const lastResetDate = localStorage.getItem('lastResetDate');
    
    if (lastResetDate !== today) {
        habits = habits.map(habit => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—á–µ—Ä–∞
            const wasCompletedYesterday = habit.progress >= habit.frequency;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            if (wasCompletedYesterday) {
                habit.streak = (habit.streak || 0) + 1;
                habit.lastCompletedDate = lastResetDate;
            } else {
                habit.streak = 0;
            }
            
            return {
                ...habit,
                progress: 0,
                date: today
            };
        });
        
        localStorage.setItem('habits', JSON.stringify(habits));
        localStorage.setItem('lastResetDate', today);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫ –æ–±–Ω—É–ª—ë–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è';
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
        
        renderHabits();
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
resetHabitsProgress();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
setInterval(resetHabitsProgress, 300000);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º
const habitForm = document.getElementById('habit-form');
const expenseForm = document.getElementById('expense-form');
const habitsListDiv = document.getElementById('habits-list');
const expensesListDiv = document.getElementById('expenses-list');

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modalOverlay = document.getElementById('confirmModal');
const modalMessage = document.getElementById('modalMessage');
const confirmButton = document.getElementById('confirmDelete');
const cancelButton = document.getElementById('cancelDelete');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
let currentDeleteFunction = null;
let currentDeleteParams = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function showModal(message, deleteFunction, params) {
    modalMessage.textContent = message;
    currentDeleteFunction = deleteFunction;
    currentDeleteParams = params;
    modalOverlay.style.display = 'flex';
}

function hideModal() {
    modalOverlay.style.display = 'none';
    currentDeleteFunction = null;
    currentDeleteParams = null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
confirmButton.addEventListener('click', () => {
    if (currentDeleteFunction) {
        currentDeleteFunction(...currentDeleteParams);
    }
    hideModal();
});

cancelButton.addEventListener('click', hideModal);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø—Ä–∏–≤—ã—á–µ–∫
habitForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const habitName = document.getElementById('habit-name').value;
    const habitFrequency = parseInt(document.getElementById('habit-frequency').value);
    
    const habit = {
        id: Date.now(),
        name: habitName,
        frequency: habitFrequency,
        progress: 0,
        streak: 0,
        lastCompletedDate: null,
        date: new Date().toISOString().split('T')[0]
    };
    
    habits.push(habit);
    saveHabits();
    renderHabits();
    habitForm.reset();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
expenseForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const expense = {
        id: Date.now(),
        name: document.getElementById('expense-name').value,
        type: document.getElementById('expense-type').value,
        date: document.getElementById('expense-date').value,
        amount: parseFloat(document.getElementById('expense-amount').value)
    };
    
    expenses.push(expense);
    saveExpenses();
    renderExpenses();
    expenseForm.reset();
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
function saveHabits() {
    localStorage.setItem('habits', JSON.stringify(habits));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
function saveExpenses() {
    localStorage.setItem('expenses', JSON.stringify(expenses));
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    const [year, month, day] = dateString.split('-');
    return `${day}.${month}.${year}`;
}

function updateProgressBar(progressElement, newWidth) {
    progressElement.classList.add('updating');
    progressElement.style.width = `${newWidth}%`;
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        progressElement.classList.remove('updating');
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
function renderHabits() {
    habitsListDiv.innerHTML = '';
    
    habits.forEach(habit => {
        const habitElement = document.createElement('div');
        habitElement.className = 'habit-item';
        habitElement.setAttribute('data-habit-id', habit.id);
        
        const progressPercentage = (habit.progress / habit.frequency) * 100;
        
        habitElement.innerHTML = `
            <div>
                <h3>${habit.name}</h3>
                <p>–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å</p>
                <p>–°–µ—Ä–∏—è: ${habit.streak || 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ üî•</p>
                <div class="progress-bar">
                    <div class="progress" style="width: 0%"></div>
                </div>
            </div>
            <div class="habit-controls">
                <button onclick="incrementHabit(${habit.id})">+</button>
                <button onclick="decrementHabit(${habit.id})">-</button>
                <button onclick="confirmDeleteHabit(${habit.id}, '${habit.name}')">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        habitsListDiv.appendChild(habitElement);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM
        const progressBar = habitElement.querySelector('.progress');
        requestAnimationFrame(() => {
            updateProgressBar(progressBar, progressPercentage);
        });
    });
}

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const expenseFilter = document.getElementById('expense-filter');
const expenseSort = document.getElementById('expense-sort');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
expenseFilter.addEventListener('change', renderExpenses);
expenseSort.addEventListener('change', renderExpenses);

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function filterExpenses(expenses) {
    const filterValue = expenseFilter.value;
    if (filterValue === '–≤—Å–µ') {
        return expenses;
    }
    return expenses.filter(expense => expense.type === filterValue);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function sortExpenses(expenses) {
    const sortValue = expenseSort.value;
    return [...expenses].sort((a, b) => {
        switch (sortValue) {
            case 'date-desc':
                return new Date(b.date) - new Date(a.date);
            case 'date-asc':
                return new Date(a.date) - new Date(b.date);
            case 'amount-desc':
                return b.amount - a.amount;
            case 'amount-asc':
                return a.amount - b.amount;
            default:
                return 0;
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
function renderExpenses() {
    expensesListDiv.innerHTML = '';
    
    let filteredExpenses = filterExpenses(expenses);
    let sortedExpenses = sortExpenses(filteredExpenses);
    
    sortedExpenses.forEach(expense => {
        const expenseElement = document.createElement('div');
        expenseElement.className = 'expense-item';
        
        expenseElement.innerHTML = `
            <div>
                <h3>${expense.name}</h3>
                <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expense.type}</p>
                <p>–î–∞—Ç–∞: ${formatDate(expense.date)}</p>
                <p>–°—É–º–º–∞: ${expense.amount} ‚ÇΩ</p>
            </div>
            <button onclick="confirmDeleteExpense(${expense.id}, '${expense.name}')">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        
        expensesListDiv.appendChild(expenseElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function incrementHabit(id) {
    const habit = habits.find(h => h.id === id);
    if (habit && habit.progress < habit.frequency) {
        habit.progress++;
        saveHabits();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const habitElement = document.querySelector(`[data-habit-id="${id}"]`);
        if (habitElement) {
            const progressBar = habitElement.querySelector('.progress');
            const progressPercentage = (habit.progress / habit.frequency) * 100;
            updateProgressBar(progressBar, progressPercentage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressText = habitElement.querySelector('p');
            progressText.textContent = `–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å`;
        } else {
            renderHabits();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function decrementHabit(id) {
    const habit = habits.find(h => h.id === id);
    if (habit && habit.progress > 0) {
        habit.progress--;
        saveHabits();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const habitElement = document.querySelector(`[data-habit-id="${id}"]`);
        if (habitElement) {
            const progressBar = habitElement.querySelector('.progress');
            const progressPercentage = (habit.progress / habit.frequency) * 100;
            updateProgressBar(progressBar, progressPercentage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressText = habitElement.querySelector('p');
            progressText.textContent = `–¶–µ–ª—å: ${habit.progress}/${habit.frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å`;
        } else {
            renderHabits();
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function confirmDeleteHabit(id, name) {
    showModal(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É "${name}"?`, deleteHabit, [id]);
}

function confirmDeleteExpense(id, name) {
    showModal(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${name}"?`, deleteExpense, [id]);
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
function deleteHabit(id) {
    habits = habits.filter(habit => habit.id !== id);
    saveHabits();
    renderHabits();
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
function deleteExpense(id) {
    expenses = expenses.filter(expense => expense.id !== id);
    saveExpenses();
    renderExpenses();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
renderHabits();
renderExpenses();

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å
const calendarOverlay = document.getElementById('calendarOverlay');
const calendarDays = document.getElementById('calendarDays');
const currentMonthElement = document.getElementById('currentMonth');
const currentYearElement = document.getElementById('currentYear');
const prevMonthBtn = document.getElementById('prevMonth');
const nextMonthBtn = document.getElementById('nextMonth');
const todayBtn = document.getElementById('todayBtn');
const clearBtn = document.getElementById('clearBtn');

const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

let currentDate = new Date();
let selectedDate = new Date();

// –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–µ –¥–∞—Ç—ã
document.getElementById('expense-date').addEventListener('click', (e) => {
    e.preventDefault();
    calendarOverlay.style.display = 'flex';
    renderCalendar();
});

// –ó–∞–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
calendarOverlay.addEventListener('click', (e) => {
    if (e.target === calendarOverlay) {
        calendarOverlay.style.display = 'none';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
prevMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar();
});

nextMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar();
});

todayBtn.addEventListener('click', () => {
    currentDate = new Date();
    selectedDate = new Date();
    renderCalendar();
    updateDateInput();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—á–∏—Å—Ç–∏—Ç—å
clearBtn.addEventListener('click', () => {
    const dateInput = document.getElementById('expense-date');
    dateInput.value = '';
    calendarOverlay.style.display = 'none';
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º
calendarOverlay.addEventListener('wheel', (e) => {
    e.preventDefault();
    const direction = e.deltaY > 0 ? 1 : -1;
    
    const calendarContent = document.querySelector('.calendar-grid');
    calendarContent.style.transform = `translateY(${direction * 20}px)`;
    calendarContent.style.opacity = '0';
    
    setTimeout(() => {
        currentDate.setMonth(currentDate.getMonth() + direction);
        renderCalendar();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        calendarContent.style.transform = `translateY(${-direction * 20}px)`;
        calendarContent.style.opacity = '1';
        
        // –ü–ª–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        requestAnimationFrame(() => {
            calendarContent.style.transform = 'translateY(0)';
        });
    }, 200);
});

function renderCalendar() {
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const monthYear = document.querySelector('.month-year');
    monthYear.style.transform = 'translateY(-10px)';
    monthYear.style.opacity = '0';
    
    setTimeout(() => {
        currentMonthElement.textContent = months[currentDate.getMonth()];
        currentYearElement.textContent = currentDate.getFullYear();
        
        monthYear.style.transform = 'translateY(0)';
        monthYear.style.opacity = '1';
    }, 100);

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ renderCalendar –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    calendarDays.innerHTML = '';
    
    let firstDayIndex = firstDay.getDay() || 7;
    firstDayIndex--;
    
    const prevLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);
    for (let i = firstDayIndex - 1; i >= 0; i--) {
        const dayElement = createDayElement(prevLastDay.getDate() - i, 'other-month');
        calendarDays.appendChild(dayElement);
    }
    
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const isToday = isCurrentDay(day);
        const dayElement = createDayElement(day, isToday ? 'today' : '');
        calendarDays.appendChild(dayElement);
    }
    
    const remainingDays = 42 - calendarDays.children.length;
    for (let day = 1; day <= remainingDays; day++) {
        const dayElement = createDayElement(day, 'other-month');
        calendarDays.appendChild(dayElement);
    }
}

function createDayElement(day, className = '') {
    const dayElement = document.createElement('div');
    dayElement.className = `day ${className}`;
    dayElement.textContent = day;
    
    dayElement.addEventListener('click', () => {
        if (!dayElement.classList.contains('other-month')) {
            selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            updateDateInput();
            calendarOverlay.style.display = 'none';
        }
    });
    
    return dayElement;
}

function isCurrentDay(day) {
    const today = new Date();
    return day === today.getDate() &&
           currentDate.getMonth() === today.getMonth() &&
           currentDate.getFullYear() === today.getFullYear();
}

function updateDateInput() {
    // –£—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –¥–æ–±–∞–≤–ª—è—è —Å–º–µ—â–µ–Ω–∏–µ
    const date = new Date(selectedDate);
    date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    const formattedDate = date.toISOString().split('T')[0];
    
    switch (updateDateTarget) {
        case 'analysis-start':
            analysisStartDate.value = formattedDate;
            analysisStartSelectedDate = new Date(selectedDate);
            break;
        case 'analysis-end':
            analysisEndDate.value = formattedDate;
            analysisEndSelectedDate = new Date(selectedDate);
            break;
        default:
            const dateInput = document.getElementById('expense-date');
            dateInput.value = formattedDate;
    }
    
    if (updateDateTarget.startsWith('analysis')) {
        updateAnalysis();
    }
}

// –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const categoriesModal = document.getElementById('categoriesModal');
const manageCategoriesBtn = document.getElementById('manageCategoriesBtn');
const closeCategoriesModal = document.getElementById('closeCategoriesModal');
const categoryForm = document.getElementById('category-form');
const categoriesList = document.getElementById('categories-list');
const categoryColor = document.getElementById('category-color');
const randomColorBtn = document.getElementById('random-color');
const categorySubmit = document.getElementById('category-submit');
const categoryActionText = document.getElementById('category-action-text');
const categoryCancel = document.getElementById('category-cancel');

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
let editingCategoryId = null;

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function saveCategories() {
    localStorage.setItem('categories', JSON.stringify(categories));
    updateCategorySelects();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function updateCategorySelects() {
    const selects = [
        document.getElementById('expense-type'),
        document.getElementById('expense-filter'),
        document.getElementById('analysis-category')
    ];

    selects.forEach(select => {
        const currentValue = select.value;
        select.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        if (select.id === 'expense-filter') {
            select.innerHTML = '<option value="–≤—Å–µ">üîç –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
        } else {
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
        }

        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.value;
            option.textContent = `${category.emoji} ${category.name}`;
            select.appendChild(option);
        });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (categories.some(cat => cat.value === currentValue)) {
            select.value = currentValue;
        }
    });
    
    updateChart();
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
randomColorBtn.addEventListener('click', () => {
    categoryColor.value = getRandomColor();
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories() {
    categoriesList.innerHTML = '';
    
    categories.forEach(category => {
        const categoryElement = document.createElement('div');
        categoryElement.className = 'category-item';
        if (editingCategoryId === category.id) {
            categoryElement.classList.add('editing');
        }
        
        categoryElement.innerHTML = `
            <div class="category-info">
                <span class="color-indicator" style="background-color: ${category.color}"></span>
                <span class="category-emoji">${category.emoji}</span>
                <span>${category.name}</span>
            </div>
            <div class="buttons">
                <button class="edit-btn" onclick="startEditCategory(${category.id})">
                    <span class="icon">‚úèÔ∏è</span>
                </button>
                <button class="delete-btn" onclick="confirmDeleteCategory(${category.id}, '${category.name}')">
                    <span class="icon">üóëÔ∏è</span>
                </button>
            </div>
        `;
        
        categoriesList.appendChild(categoryElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function startEditCategory(id) {
    const category = categories.find(cat => cat.id === id);
    if (!category) return;
    
    editingCategoryId = id;
    document.getElementById('category-name').value = category.name;
    document.getElementById('category-emoji').value = category.emoji;
    document.getElementById('category-color').value = category.color;
    categoryActionText.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    categoryCancel.style.display = 'flex';
    renderCategories();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit() {
    editingCategoryId = null;
    categoryForm.reset();
    categoryActionText.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    categoryCancel.style.display = 'none';
    renderCategories();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categoryForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const name = document.getElementById('category-name').value;
    const emoji = document.getElementById('category-emoji').value;
    const color = document.getElementById('category-color').value;
    const value = name.toLowerCase();
    
    if (editingCategoryId) {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const categoryIndex = categories.findIndex(cat => cat.id === editingCategoryId);
        if (categoryIndex === -1) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        if (categories.some(cat => cat.value === value && cat.id !== editingCategoryId)) {
            showModal('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        const oldValue = categories[categoryIndex].value;
        const isUsed = expenses.some(expense => expense.type === oldValue);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories[categoryIndex] = {
            ...categories[categoryIndex],
            name,
            emoji,
            color,
            value
        };
        
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        if (isUsed) {
            expenses = expenses.map(expense => {
                if (expense.type === oldValue) {
                    return { ...expense, type: value };
                }
                return expense;
            });
            localStorage.setItem('expenses', JSON.stringify(expenses));
        }
        
        cancelEdit();
    } else {
        // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if (categories.some(cat => cat.value === value)) {
            showModal('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            return;
        }
        
        const category = {
            id: Date.now(),
            name,
            emoji,
            color,
            value
        };
        
        categories.push(category);
    }
    
    saveCategories();
    renderCategories();
    categoryForm.reset();
    categoryColor.value = getRandomColor();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.style.backgroundColor = 'var(--success-color)';
    notification.textContent = editingCategoryId ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞';
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
categoryCancel.addEventListener('click', cancelEdit);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function confirmDeleteCategory(id, name) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const categoryValue = categories.find(cat => cat.id === id)?.value;
    const isUsed = expenses.some(expense => expense.type === categoryValue);
    
    if (isUsed) {
        showModal(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö.`);
        return;
    }
    
    showModal(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${name}"?`, deleteCategory, [id]);
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function deleteCategory(id) {
    categories = categories.filter(category => category.id !== id);
    saveCategories();
    renderCategories();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
manageCategoriesBtn.addEventListener('click', () => {
    categoriesModal.style.display = 'flex';
    renderCategories();
});

closeCategoriesModal.addEventListener('click', () => {
    categoriesModal.style.display = 'none';
});

categoriesModal.addEventListener('click', (e) => {
    if (e.target === categoriesModal) {
        categoriesModal.style.display = 'none';
    }
});

// –≠–ª–µ–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
const analysisCategory = document.getElementById('analysis-category');
const analysisPeriod = document.getElementById('analysis-period');
const analysisStartDate = document.getElementById('analysis-start-date');
const analysisEndDate = document.getElementById('analysis-end-date');
const analysisSearch = document.getElementById('analysis-search');
const totalAmountElement = document.getElementById('total-amount');
const categoriesAmountsElement = document.getElementById('categories-amounts');
const dateRangeContainer = document.querySelector('.date-range');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–Ω–∞–ª–∏–∑–∞
let analysisStartSelectedDate = new Date();
let analysisEndSelectedDate = new Date();

// –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª—è –¥–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
analysisStartDate.addEventListener('click', (e) => {
    e.preventDefault();
    selectedDate = analysisStartSelectedDate;
    currentDate = new Date(selectedDate);
    updateDateTarget = 'analysis-start';
    calendarOverlay.style.display = 'flex';
    renderCalendar();
});

analysisEndDate.addEventListener('click', (e) => {
    e.preventDefault();
    selectedDate = analysisEndSelectedDate;
    currentDate = new Date(selectedDate);
    updateDateTarget = 'analysis-end';
    calendarOverlay.style.display = 'flex';
    renderCalendar();
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateDateInput –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π –¥–∞—Ç—ã
let updateDateTarget = 'expense';

function updateDateInput() {
    // –£—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –¥–æ–±–∞–≤–ª—è—è —Å–º–µ—â–µ–Ω–∏–µ
    const date = new Date(selectedDate);
    date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    const formattedDate = date.toISOString().split('T')[0];
    
    switch (updateDateTarget) {
        case 'analysis-start':
            analysisStartDate.value = formattedDate;
            analysisStartSelectedDate = new Date(selectedDate);
            break;
        case 'analysis-end':
            analysisEndDate.value = formattedDate;
            analysisEndSelectedDate = new Date(selectedDate);
            break;
        default:
            const dateInput = document.getElementById('expense-date');
            dateInput.value = formattedDate;
    }
    
    if (updateDateTarget.startsWith('analysis')) {
        updateAnalysis();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ expense-date
document.getElementById('expense-date').addEventListener('click', (e) => {
    e.preventDefault();
    updateDateTarget = 'expense';
    calendarOverlay.style.display = 'flex';
    renderCalendar();
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 2
    }).format(amount);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∞–Ω–∞–ª–∏–∑–µ
function updateAnalysisCategories() {
    analysisCategory.innerHTML = '<option value="–≤—Å–µ">üîç –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.value;
        option.textContent = `${category.emoji} ${category.name}`;
        analysisCategory.appendChild(option);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
function getDateRange(period) {
    const today = new Date();
    const start = new Date();
    
    switch (period) {
        case 'day':
            start.setHours(0, 0, 0, 0);
            return { start, end: today };
        case 'week':
            start.setDate(today.getDate() - 7);
            return { start, end: today };
        case 'month':
            start.setMonth(today.getMonth() - 1);
            return { start, end: today };
        case 'year':
            start.setFullYear(today.getFullYear() - 1);
            return { start, end: today };
        case 'custom':
            return {
                start: analysisStartDate.value ? new Date(analysisStartDate.value) : null,
                end: analysisEndDate.value ? new Date(analysisEndDate.value) : null
            };
        default:
            return { start: null, end: null };
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
function filterExpensesForAnalysis() {
    let filteredExpenses = [...expenses];
    const searchTerm = analysisSearch.value.toLowerCase();
    const selectedCategory = analysisCategory.value;
    const { start, end } = getDateRange(analysisPeriod.value);
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedCategory !== '–≤—Å–µ') {
        filteredExpenses = filteredExpenses.filter(expense => expense.type === selectedCategory);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (searchTerm) {
        filteredExpenses = filteredExpenses.filter(expense => 
            expense.name.toLowerCase().includes(searchTerm)
        );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if (start && end) {
        filteredExpenses = filteredExpenses.filter(expense => {
            const expenseDate = new Date(expense.date);
            return expenseDate >= start && expenseDate <= end;
        });
    }
    
    return filteredExpenses;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
function updateAnalysis() {
    const filteredExpenses = filterExpensesForAnalysis();
    const totalAmount = filteredExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    totalAmountElement.textContent = formatAmount(totalAmount);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryAmounts = {};
    filteredExpenses.forEach(expense => {
        if (!categoryAmounts[expense.type]) {
            categoryAmounts[expense.type] = 0;
        }
        categoryAmounts[expense.type] += expense.amount;
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categoriesAmountsElement.innerHTML = '';
    Object.entries(categoryAmounts).forEach(([type, amount]) => {
        const category = categories.find(cat => cat.value === type);
        if (category) {
            const percentage = ((amount / totalAmount) * 100).toFixed(1);
            const categoryElement = document.createElement('div');
            categoryElement.className = 'category-amount';
            categoryElement.innerHTML = `
                <div class="category-info">
                    <span class="category-emoji">${category.emoji}</span>
                    <span>${category.name}</span>
                </div>
                <div>
                    <span class="amount">${formatAmount(amount)}</span>
                    <span class="percentage">${percentage}%</span>
                </div>
            `;
            categoriesAmountsElement.appendChild(categoryElement);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
analysisPeriod.addEventListener('change', () => {
    dateRangeContainer.style.display = 
        analysisPeriod.value === 'custom' ? 'block' : 'none';
    updateAnalysis();
});

[analysisCategory, analysisSearch, analysisStartDate, analysisEndDate].forEach(
    element => element.addEventListener('change', updateAnalysis)
);

analysisSearch.addEventListener('input', updateAnalysis);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
updateAnalysisCategories();
updateAnalysis();

// –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
const chartPeriodSelect = document.getElementById('chart-period');
const chartTypeSelect = document.getElementById('chart-type');
const chartLegend = document.getElementById('chart-legend');
const ctx = document.getElementById('expenses-chart').getContext('2d');

// –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
let expensesChart = null;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
function getChartData(period, chartType) {
    const today = new Date();
    let startDate = new Date();
    
    switch (period) {
        case 'week':
            startDate.setDate(today.getDate() - 7);
            break;
        case 'month':
            startDate.setMonth(today.getMonth() - 1);
            break;
        case 'year':
            startDate.setFullYear(today.getFullYear() - 1);
            break;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const filteredExpenses = expenses.filter(expense => {
        const expenseDate = new Date(expense.date);
        return expenseDate >= startDate && expenseDate <= today;
    });

    if (chartType === 'pie') {
        // –î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categoryTotals = {};
        categories.forEach(category => {
            categoryTotals[category.value] = 0;
        });

        filteredExpenses.forEach(expense => {
            categoryTotals[expense.type] += expense.amount;
        });

        return {
            labels: categories.map(category => `${category.emoji} ${category.name}`),
            datasets: [{
                data: categories.map(category => categoryTotals[category.value]),
                backgroundColor: categories.map(category => category.color),
                borderColor: categories.map(category => category.color),
                borderWidth: 1
            }]
        };
    } else {
        // –î–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const dateExpenses = {};
        const categoryVisibility = {};
        
        categories.forEach(category => {
            categoryVisibility[category.value] = true;
        });
        
        filteredExpenses.forEach(expense => {
            const date = expense.date;
            if (!dateExpenses[date]) {
                dateExpenses[date] = {};
                categories.forEach(category => {
                    dateExpenses[date][category.value] = 0;
                });
            }
            dateExpenses[date][expense.type] += expense.amount;
        });
        
        const sortedDates = Object.keys(dateExpenses).sort();
        
        return {
            labels: sortedDates,
            datasets: categories.map(category => ({
                label: `${category.emoji} ${category.name}`,
                data: sortedDates.map(date => dateExpenses[date][category.value]),
                borderColor: category.color,
                backgroundColor: chartType === 'bar' ? category.color : category.color + '80',
                tension: 0.4,
                hidden: !categoryVisibility[category.value]
            }))
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã
function updateChartLegend() {
    chartLegend.innerHTML = '';
    
    if (chartTypeSelect.value === 'pie') {
        // –î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ª–µ–≥–µ–Ω–¥–∞ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
        categories.forEach((category, index) => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';
            
            legendItem.innerHTML = `
                <span class="legend-color" style="background: ${category.color}"></span>
                <span>${category.emoji} ${category.name}</span>
            `;
            
            chartLegend.appendChild(legendItem);
        });
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
        categories.forEach(category => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';
            if (!expensesChart.isDatasetVisible(categories.indexOf(category))) {
                legendItem.classList.add('disabled');
            }
            
            legendItem.innerHTML = `
                <span class="legend-color" style="background: ${category.color}"></span>
                <span>${category.emoji} ${category.name}</span>
            `;
            
            legendItem.addEventListener('click', () => {
                const index = categories.indexOf(category);
                const isVisible = expensesChart.isDatasetVisible(index);
                
                expensesChart.setDatasetVisibility(index, !isVisible);
                legendItem.classList.toggle('disabled');
                expensesChart.update();
            });
            
            chartLegend.appendChild(legendItem);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
function updateChart() {
    const chartType = chartTypeSelect.value;
    const data = getChartData(chartPeriodSelect.value, chartType);
    
    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        }
    };

    if (chartType !== 'pie') {
        options.interaction = {
            intersect: false,
            mode: 'index'
        };
        options.scales = {
            x: {
                type: 'time',
                time: {
                    unit: chartPeriodSelect.value === 'year' ? 'month' : 'day',
                    displayFormats: {
                        day: 'dd.MM',
                        month: 'MM.yyyy'
                    }
                },
                grid: {
                    color: 'rgba(0, 0, 0, 0.1)'
                }
            },
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                    }
                },
                grid: {
                    color: 'rgba(0, 0, 0, 0.1)'
                }
            }
        };
    }
    
    if (expensesChart) {
        expensesChart.destroy();
    }

    expensesChart = new Chart(ctx, {
        type: chartType,
        data: data,
        options: options
    });

    updateChartLegend();
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
chartTypeSelect.addEventListener('change', updateChart);

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
chartPeriodSelect.addEventListener('change', updateChart);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
updateChart();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
categoryColor.value = getRandomColor(); 